# 1 "lexer.mll"
 
open Support.Error

let reservedWords = [
  (* keywords *)
  ("import",  fun i -> Parser.IMPORT i);
  ("if",      fun i -> Parser.IF i);
  ("then",    fun i -> Parser.THEN i);
  ("else",    fun i -> Parser.ELSE i);
  ("true",    fun i -> Parser.TRUE i);
  ("false",   fun i -> Parser.FALSE i);
  ("succ",    fun i -> Parser.SUCC i);
  ("pred",    fun i -> Parser.PRED i);
  ("iszero",  fun i -> Parser.ISZERO i);
  ("Bool",    fun i -> Parser.BOOL i);
  ("Nat",     fun i -> Parser.NAT i);

  (* symbols *)
  (";",       fun i -> Parser.SEMI i);
  ("(",       fun i -> Parser.LPAREN i);
  (")",       fun i -> Parser.RPAREN i)
]

(* Support functions *)
type buildfun = info -> Parser.token
let (symbolTable : (string, buildfun) Hashtbl.t) = Hashtbl.create 1024
let _ =
  List.iter (fun (str, f) -> Hashtbl.add symbolTable str f) reservedWords

let createID i str =
  try (Hashtbl.find symbolTable str) i
  with _ ->
    if (String.get str 0) >= 'A' && (String.get str 0) <= 'Z' then
      Parser.UCID {i=i; v=str}
    else
      Parser.LCID {i=i; v=str}

let lineno    = ref 1
let depth     = ref 0
let start     = ref 0 (* 最後に改行を読んだ時の offset  *)
let filename  = ref ""
let startLex  = ref dummyinfo

(* create: string -> in_channel -> Lexing.lexbuf *)
let create inFile stream =
  if not (Filename.is_implicit inFile) then filename := inFile
  else filename := Filename.concat (Sys.getcwd()) inFile;
  lineno := 1; start := 0; Lexing.from_channel stream

let newline lexbuf = incr lineno; start := (Lexing.lexeme_start lexbuf)
(* info : Lexing.lexbuf -> Support.Error.info *)
let info lexbuf =
  createInfo (!filename) (!lineno) (Lexing.lexeme_start lexbuf - !start)

let text = Lexing.lexeme

let stringBuffer = ref (Bytes.create 2048)
(* 新しく書き込む時の場所を示すポインタ *)
let stringEnd = ref 0

let resetStr () = stringEnd := 0

(* addChar: char -> unit *)
let addChar ch =
  let x = !stringEnd in
  let buffer = !stringBuffer in
  if x = Bytes.length buffer then
    begin
      let newBuffer = Bytes.create (x*2) in
      Bytes.blit buffer 0 newBuffer 0 x;
      Bytes.set newBuffer x ch;
      stringBuffer := newBuffer;
      incr stringEnd
    end
  else
    begin
      Bytes.set buffer x ch;
      incr stringEnd
    end

let getStr () = Bytes.sub_string !stringBuffer 0 !stringEnd


# 86 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\246\255\247\255\248\255\249\255\084\000\159\000\001\000\
    \011\000\254\255\003\000\253\255\252\255\082\000\251\255\252\255\
    \253\255\013\000\002\000\255\255\254\255\004\000\251\255\252\255\
    \253\255\254\255\255\255\183\000\193\000\251\255\252\255\253\255\
    \254\255\255\255\213\000\250\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\005\000\004\000\009\000\
    \009\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\015\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\010\000\009\000\000\000\010\000\000\000\024\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\003\000\010\000\000\000\000\000\026\000\000\000\
    \004\000\004\000\008\000\012\000\019\000\000\000\000\000\007\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\011\000\004\000\020\000\000\000\000\000\000\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\000\000\014\000\000\000\000\000\005\000\
    \025\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\017\000\000\000\000\000\000\000\
    \000\000\018\000\000\000\000\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\000\000\
    \000\000\000\000\000\000\005\000\000\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\030\000\000\000\000\000\000\000\000\000\029\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\023\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\000\000\
    \000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
    \000\000\000\000\000\000\032\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\010\000\255\255\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\010\000\255\255\255\255\021\000\255\255\
    \000\000\000\000\000\000\007\000\018\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\008\000\000\000\017\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\013\000\255\255\255\255\000\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\005\000\013\000\255\255\255\255\255\255\
    \255\255\013\000\255\255\255\255\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\255\255\
    \255\255\255\255\255\255\005\000\255\255\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\027\000\255\255\255\255\255\255\255\255\027\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\021\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\255\255\
    \255\255\255\255\255\255\027\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\027\000\255\255\255\255\
    \255\255\255\255\255\255\027\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\013\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec main lexbuf =
   __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 90 "lexer.mll"
      ( main lexbuf )
# 247 "lexer.ml"

  | 1 ->
# 92 "lexer.mll"
      ( newline lexbuf; main lexbuf )
# 252 "lexer.ml"

  | 2 ->
# 94 "lexer.mll"
      ( error (info lexbuf) "Unmatiched end of comment" )
# 257 "lexer.ml"

  | 3 ->
# 96 "lexer.mll"
      ( depth := 1; startLex := info lexbuf; comment lexbuf; main lexbuf )
# 262 "lexer.ml"

  | 4 ->
# 98 "lexer.mll"
      ( Parser.INTV{i = info lexbuf; v = int_of_string (text lexbuf)} )
# 267 "lexer.ml"

  | 5 ->
# 101 "lexer.mll"
      ( createID (info lexbuf) (text lexbuf) )
# 272 "lexer.ml"

  | 6 ->
# 103 "lexer.mll"
      ( createID (info lexbuf) (text lexbuf) )
# 277 "lexer.ml"

  | 7 ->
# 105 "lexer.mll"
      ( resetStr (); startLex := info lexbuf; string lexbuf )
# 282 "lexer.ml"

  | 8 ->
# 107 "lexer.mll"
      ( Parser.EOF(info lexbuf) )
# 287 "lexer.ml"

  | 9 ->
# 109 "lexer.mll"
      ( error (info lexbuf) "Illegal character")
# 292 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 13
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 112 "lexer.mll"
      ( incr depth; comment lexbuf )
# 304 "lexer.ml"

  | 1 ->
# 114 "lexer.mll"
      ( decr depth; if !depth > 0 then comment lexbuf )
# 309 "lexer.ml"

  | 2 ->
# 116 "lexer.mll"
      ( error (!startLex) "Comment not terminated")
# 314 "lexer.ml"

  | 3 ->
# 118 "lexer.mll"
      ( comment lexbuf )
# 319 "lexer.ml"

  | 4 ->
# 120 "lexer.mll"
      ( newline lexbuf; comment lexbuf )
# 324 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 21
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 123 "lexer.mll"
      ( Parser.STRINGV{i = !startLex; v = getStr ()} )
# 336 "lexer.ml"

  | 1 ->
# 125 "lexer.mll"
      ( addChar (escaped lexbuf); string lexbuf )
# 341 "lexer.ml"

  | 2 ->
# 127 "lexer.mll"
      ( addChar '\n'; newline lexbuf; string lexbuf )
# 346 "lexer.ml"

  | 3 ->
# 129 "lexer.mll"
      ( error (!startLex) "String not terminated" )
# 351 "lexer.ml"

  | 4 ->
# 131 "lexer.mll"
      ( addChar (Lexing.lexeme_char lexbuf 0); string lexbuf )
# 356 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and escaped lexbuf =
   __ocaml_lex_escaped_rec lexbuf 27
and __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 134 "lexer.mll"
      ( '\n' )
# 368 "lexer.ml"

  | 1 ->
# 136 "lexer.mll"
      ( '\t' )
# 373 "lexer.ml"

  | 2 ->
# 138 "lexer.mll"
      ( '\\' )
# 378 "lexer.ml"

  | 3 ->
# 140 "lexer.mll"
      ( '\034')
# 383 "lexer.ml"

  | 4 ->
# 142 "lexer.mll"
      ( '\'' )
# 388 "lexer.ml"

  | 5 ->
# 144 "lexer.mll"
      ( let x = int_of_string (text lexbuf) in
        if x > 255 then
          error (info lexbuf) "Illegal character constant"
        else
          Char.chr x
      )
# 398 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state

;;

